<?php
/**
 * Created by PhpStorm.
 * User: liaozijie
 * Date: 2018-04-25
 * Time: 9:28
 */

namespace app\api\controller\v1;

use Qiniu\Auth;
use Qiniu\Storage\UploadManager;
use think\Controller;
use think\Db;
use think\Request;

class Common extends Home
{
    public function _initialize(Request $request = null)
    {
        parent::_initialize($request); // TODO: Change the autogenerated stub
    }

    public function area(){
        $pid = isset($this->data['id']) || empty($this->data['id']) ? $this->data['id'] + 0 : 0;
        $data = model('Area')->getAreaList($pid);
        $this->apiReturn(200, $data);
    }

    public function brand(){
        $model = model('Brand');
        $data  = $model->getBrandList();
        !$data && $this->apiReturn(201);
        $this->apiReturn(200, $data);
    }

    /*
     * 通过汽车品牌ID获取车系
     * */
    public function series(){
        (!isset($this->data['bid']) || empty($this->data['bid'])) && $this->apiReturn(201, '', '品牌ID非法');
        $brandId = $this->data['bid'] + 0;

        $model = model('Brand');
        $data  = $model->getCarFamilyByBrandId($brandId);
        !$data && $this->apiReturn(201);
        $this->apiReturn(200, $data);
    }

    /*
     * 通过车系查询
     * */
    public function carList(){
        (!isset($this->data['fid']) || empty($this->data['fid'])) && $this->apiReturn(201, '', '系列ID非法');
        $page = isset($this->data['page']) ? $this->data['page'] + 0: 1;

        $familyId = $this->data['fid'] + 0;
        $field = 'carId as id,carName as name,indexImage as image,price,pl as output,styleName';
        $model = model('Car');
        $data  = $model->getCarByFamilyId($familyId, $field, $page);
        !$data && $this->apiReturn(201);
        $this->apiReturn(200, $data);
    }

    public function share(){
        set_time_limit(0);
        require_once '../extend/mpdf/mpdf.php';
//        $mpdf = new \mPDF('utf-8','A4','','',25 , 25, 16, 16); //'utf-8' 或者 '+aCJK' 或者 'zh-CN'都可以显示中文
        $mpdf = new \mPDF('utf-8','A4','','',0 , 0, 0, 0); //'utf-8' 或者 '+aCJK' 或者 'zh-CN'都可以显示中文
        //设置字体，解决中文乱码
        $mpdf->useAdobeCJK = TRUE;
        $mpdf->autoScriptToLang = true;
        $mpdf->autoLangToFont = true;
        //$mpdf-> showImageErrors = true; //显示图片无法加载的原因，用于调试，注意的是,我的机子上gif格式的图片无法加载出来。
        //设置pdf显示方式
        $mpdf->SetDisplayMode('fullpage');
        //目录相关设置：
        //Remember bookmark levels start at 0(does not work inside tables)H1 - H6 must be uppercase
        //$this->h2bookmarks = array('H1'=>0, 'H2'=>1, 'H3'=>2);
//        $mpdf->h2toc = array('H3'=>0,'H4'=>1,'H5'=>2);
//        $mpdf->h2bookmarks = array('H3'=>0,'H4'=>1,'H5'=>2);
        $mpdf->mirrorMargins = 1;
        //是否缩进列表的第一级
        $mpdf->list_indent_first_level = 0;

        $options = [
            'ssl' => [
                'verify_peer' => false,
                'verify_peer_name' => false,
            ]
        ];

//        $html = $this->fetch('v1/common/index');
//        $html = urldecode($html);
        $url = 'http://api.xfnauto.com/index.html';
        $html = file_get_contents($url, false, stream_context_create($options));
        $mpdf->WriteHTML($html);  //$html中的内容即为变成pdf格式的html内容。
        $microtime   = explode('.', microtime(true));
        $fileName    = date('YmdHis') . end($microtime);
        $pdfFileName = $fileName . '.pdf';
        //输出pdf文件
        $mpdf->Output('upload/' . $pdfFileName); //'I'表示在线展示 'D'则显示下载窗口
        $startTime = microtime(true);
        if(file_exists('upload/' . $pdfFileName)){
            $result = pdf2png('upload/' . $pdfFileName, 'upload/image');
            unlink('upload/' . $pdfFileName);
            if($result){
                $auth  = new Auth(config('qiniu.accesskey'), config('qiniu.secretkey'));
                $token = $auth->uploadToken(config('qiniu.bucket'));
                $data  = array();
                $upload = new UploadManager();
                foreach($result as $key => $value){
                    list($ret, $err) = $upload->putFile($token, $value, $value);
                    if($err === null){
                        $data[$key] = 'http://' . config('qiniu.domain') . '/' . $ret['key'];
                    }
                    unlink($value);
                }
                $time = microtime(true) - $startTime;
                logs_write($time, request()->controller(), request()->action(), $result);
                $this->apiReturn(200, $data);
            }else{
                $this->apiReturn(201, '', '图片生成失败');
            }
        }else{
            $this->apiReturn(201, '', '文件不存在');
        }
    }

    public function createImage(){
        (!isset($this->data['id']) || empty($this->data['id'])) && $this->apiReturn(201, '', 'ID非法');
        $id = $this->data['id'] + 0;
        $join = [
            ['share_material sm', 'sm.material_id=info.material_id', 'left'],
            ['system_user', 'info.system_user_id=usersId', 'left'],
        ];
        $info = Db::name('share_material_info info')->where(['material_info_id' => $id])->field('material_name as title,info.remarks,sm.image materialImage,info.image,realName,phoneNumber')->join($join)->find();
        if(!$info){
            $this->apiReturn(201, '', '数据不存在');
        }

        if($info['materialImage']){
            $materialImage = explode(',', $info['materialImage']);
            $info = array_merge($info, $materialImage);
            unset($info['materialImage']);
        }

        foreach($info as $key => $value){
            if(!in_array($key, ['image', 'realName', 'phoneNumber'])){
                $data[] = $value;
            }
        }

        if($info['image']){
            $image = explode(',', $info['image']);
            $data  = array_merge($data, $image);
        }

        $url = $this->getWchatQcode($data);
        if(!$url){
            $this->apiReturn(201, '', 'file not found');
        }
        $data[] = $url['url'];
        $data[] = '分享人：' . $info['realName'] . '　　电话：' . $info['phoneNumber'];

        $img  = 'upload/image/' . md5(serialize($data) . microtime(true)) . '.jpg';

        $width  = [];
        $height = [];
        $font   = './msyhbd.ttf';
        $fontSize   = 18;//磅值字体
        $rowSpacing = 60;//行距
        $colSpacing = 30;//左右边距
        $top        = 120;
        foreach($data as $key => $value){
            if(filter_var($value, FILTER_VALIDATE_URL)){
                $imageInfo = @get_headers($value, true);
                $ext       = @explode('/', $imageInfo['Content-Type'])[1];
                if(in_array($ext, ['png', 'jpeg', 'gif'])){
                    $imagecreate = 'imagecreatefrom' . $ext;
                    if(function_exists($imagecreate)){
                        $main[$key]   = @$imagecreate($value);
                        $width[$key]  = imagesx($main[$key]);
                        $height[$key] = imagesy($main[$key]);
                        $imageWidth[] = $width[$key];
                    }
                }
            }else{
                if($value){
//                    $text             = autowrap($fontSize, 0, $font, $value, 500);
                    $fontBox          = imagettfbbox($fontSize, 0, $font, $value);//文字水平居中实质
                    $fontWidth[$key]  = $fontBox[2];
                    $height[$key]     = abs($fontBox[1]) + abs($fontBox[7]) + $rowSpacing;
                }
            }
        }

        $targetWidth  = max($imageWidth) + $colSpacing * 2;
        $targetWidth  = $targetWidth >= 500 ? $targetWidth : 500;
        $targetHeight = array_sum($height) + (count($data) - 1) * $rowSpacing + $top;

        $target = imagecreatetruecolor($targetWidth, $targetHeight);
        $white  = imagecolorallocate($target, 255, 255, 255);
        imagefill ($target, 0, 0, $white );

        $fontSize  = 18;//磅值字体
        $fontColor = imagecolorallocate ($target, 0, 0, 0 );//字的RGB颜色

        $h = $top;
        foreach($data as $key => $value){
            if($key != 0){
                $h += $height[$key - 1] + $rowSpacing;
            }
            if(filter_var($value, FILTER_VALIDATE_URL)){
                $imageInfo = @get_headers($value, true);
                $ext       = @explode('/', $imageInfo['Content-Type'])[1];
                if(in_array($ext, ['png', 'jpeg', 'gif'])){
                    $imagecreate = 'imagecreatefrom' . $ext;
                    if(function_exists($imagecreate)){
                        $temp = @$imagecreate($value);
                        imagecopy($target, $temp, ceil(($targetWidth - $width[$key]) / 2), $h, 0, 0, $width[$key], $height[$key]);
                    }
                }
            }else{
                if($value){
                    if($key == 0){
                        $fontSize = 24;
                    }
                    $fontBox      = imagettfbbox($fontSize, 0, $font, $value);
                    $text         = autowrap($fontSize, 0, $font, $value, max($imageWidth));
                    $w = $fontBox[2] >= max($imageWidth) ? $colSpacing : ($targetWidth - $fontBox[2]) / 2;
                    imagettftext($target, $fontSize, 0, ceil($w), $h, $fontColor, $font, $text);
                }

            }
        }

        imagejpeg ($target, './' . $img, 100);

        foreach($main as $key => $value){
            imagedestroy($value);
        }
        imagedestroy ($target);
        $data = array();
        $data['url'] = $this->upFile($img);
        unlink($url['filename']);
        $this->apiReturn(200, $data);
    }

    /**
     * 处理微信二维码到本地
     * */
    protected function getWchatQcode($data){
//        dump($data);die;
        $url    = model('Wechat', 'service')->qcode($this->userId);
        if(!$url){
            return false;
        }
        $options = [
            'ssl' => [
                'verify_peer' => false,
                'verify_peer_name' => false,
            ]
        ];
        $wImageName = md5(json_encode($data) . microtime(true) . '_' . $this->userId) . '.jpg';
        $urlInfo = file_get_contents($url, false, stream_context_create($options));
        file_put_contents($wImageName, $urlInfo);

        if(!file_exists($wImageName)){
            $this->apiReturn(201, '', 'file not found 1');
        }

        return ['url' => 'http://api.' . config('url_domain_root') . '/' . $wImageName, 'filename' => $wImageName];
    }

    public function upFile($img){
        $auth  = new Auth(config('qiniu.accesskey'), config('qiniu.secretkey'));
        $token = $auth->uploadToken(config('qiniu.bucket'));
        $upload = new UploadManager();
        if(file_exists($img)){
            list($ret, $err) = $upload->putFile($token, $img, $img);
            if($err === null){
                unlink($img);
                return 'http://' . config('qiniu.domain') . '/' . $ret['key'];
            }
            return ['error' => $err, 'ret' => $ret];
        }
        return 'file not found';
    }

}